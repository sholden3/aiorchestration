# AI Governance Exemptions Configuration
# Version: 1.0
# Last Updated: 2025-01-28
# 
# This file defines exemptions for governance rules to handle legitimate
# uses of patterns that would otherwise be flagged as dangerous.

version: "1.0"

# Scope change notice
scope_change_notice: |
  This architectural change enables cross-language governance
  while maintaining security standards across our polyglot codebase.
  Added as part of Phase 1.5 to address false positives.

# Global safe patterns that are never dangerous
global_safe_patterns:
  python:
    - "re.compile"          # Regular expression compilation
    - "ast.literal_eval"    # Safe literal evaluation
    - "json.loads"          # JSON parsing
    - "yaml.safe_load"      # Safe YAML loading
  
  typescript:
    - "JSON.parse"          # JSON parsing
    - "RegExp"              # Regular expression creation
    - "new Function"        # When used for templates only
  
  javascript:
    - "JSON.parse"          # JSON parsing
    - "RegExp"              # Regular expression creation

# File-specific exemptions
file_exemptions:
  # Governance core files
  - path: "governance/core/todo_tracker.py"
    patterns: ["re.compile"]
    reason: "Regular expression patterns for TODO detection"
    expires: "2026-01-01"
    reviewed_by: ["sarah_chen", "alex_novak"]
  
  - path: "governance/core/session_manager.py"
    patterns: ["setattr"]
    reason: "Safe dataclass attribute updates"
    expires: "2026-01-01"
    reviewed_by: ["sarah_chen", "alex_novak"]
  
  # Documentation files can contain example code
  - path: "docs/**/*.md"
    patterns: ["eval", "exec", "compile", "setattr", "__import__", "os.system", "subprocess", "DROP TABLE", "DELETE FROM", "rm -rf"]
    reason: "Documentation contains code examples showing what to avoid"
    expires: "2026-01-01"
    reviewed_by: ["alex_novak", "sarah_chen"]
    skip_documentation_check: true
  
  - path: "**/*.md"
    patterns: ["eval", "exec", "compile", "setattr", "__import__", "os.system", "subprocess", "DROP TABLE", "DELETE FROM", "rm -rf"]
    reason: "Markdown files contain example code demonstrating dangerous patterns, not executable"
    expires: "2026-01-01"
    reviewed_by: ["alex_novak", "sarah_chen"]
    skip_documentation_check: true
  
  # Governance hook files that check for dangerous patterns
  - path: "governance/hooks/claude_code_governance_hook.py"
    patterns: ["eval", "exec", "__import__", "os.system", "subprocess.call", "DROP TABLE", "DELETE FROM", "rm -rf"]
    reason: "Hook checks for these patterns - they appear as string literals in detection lists"
    expires: "2026-01-01"
    reviewed_by: ["sarah_chen", "alex_novak"]
  
  # Test files demonstrating governance functionality
  - path: "governance/tests/demo_governance_visibility.py"
    patterns: ["eval", "exec", "__import__", "os.system", "rm -rf"]
    reason: "Demo file showing dangerous patterns being blocked - patterns in string literals"
    expires: "2026-01-01"
    reviewed_by: ["sarah_chen", "alex_novak"]
  
  - path: "governance/tests/test_runtime_governance.py"
    patterns: ["eval", "exec"]
    reason: "Test file testing dangerous pattern detection - patterns in test strings"
    expires: "2026-01-01"
    reviewed_by: ["sarah_chen", "alex_novak"]
  
  # Python __init__ files are structural, not functional
  - path: "**/__init__.py"
    patterns: ["*"]
    reason: "Python package initialization files are structural markers"
    expires: "2026-01-01"
    reviewed_by: ["sarah_chen", "alex_novak"]
    skip_documentation_check: true
    skip_test_check: true
  
  # Configuration files don't need code documentation
  - path: "**/*.yml"
    patterns: ["*"]
    reason: "YAML configuration files are data, not code"
    expires: "2026-01-01"
    reviewed_by: ["sarah_chen", "alex_novak"]
    skip_documentation_check: true
    skip_test_check: true
  
  - path: "**/*.yaml"
    patterns: ["*"]
    reason: "YAML configuration files are data, not code"
    expires: "2026-01-01"
    reviewed_by: ["sarah_chen", "alex_novak"]  
    skip_documentation_check: true
    skip_test_check: true
  
  - path: "**/*.json"
    patterns: ["*"]
    reason: "JSON configuration files are data, not code"
    expires: "2026-01-01"
    reviewed_by: ["sarah_chen", "alex_novak"]
    skip_documentation_check: true
    skip_test_check: true

# Class-specific exemptions
class_exemptions:
  - name: "TodoTracker"
    patterns: ["re.compile"]
    reason: "Regex pattern compilation for TODO detection"
    
  - name: "SessionManager"
    patterns: ["setattr"]
    reason: "Dynamic attribute updates on dataclasses"
    
  - name: "TemplateEngine"
    patterns: ["compile"]
    reason: "Template compilation only"

# Context-based exemptions
context_exemptions:
  - context: "test_"
    patterns: ["eval", "exec", "compile"]
    reason: "Test files testing dangerous patterns"
    requires: "@testing_strategy header"
  
  - context: "mock_"
    patterns: ["eval", "exec"]
    reason: "Mock implementations"
  
  - context: "migration"
    patterns: ["DROP TABLE", "ALTER TABLE"]
    reason: "Database migrations require DDL"

# Temporary exemptions for migration
temporary_exemptions:
  - path: "governance/**/*.py"
    patterns: ["compile"]
    reason: "Migration period - refining pattern detection"
    expires: "2025-02-01"
    ticket: "ARCH-001"

# Review requirements
review_requirements:
  exemption_approval:
    required_reviewers: ["sarah_chen", "alex_novak"]
    min_approvals: 2
  
  exemption_renewal:
    warning_days: 30
    auto_expire: true
    
  audit_frequency: "monthly"

# Notes for developers
notes: |
  Exemptions should be:
  - Temporary when possible (set expiration)
  - Specific to context (not blanket exemptions)
  - Reviewed regularly (monthly audit)
  - Documented with clear reasons
  
  If you need an exemption:
  1. Add it to this file
  2. Get approval from both architects
  3. Set an expiration date
  4. Link to relevant ticket/decision doc
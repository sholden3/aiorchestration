# Governance Rules Configuration
# Enhanced rules for comprehensive code governance

version: "2.0"
last_updated: "2025-08-29"
author: "Enhanced Governance Framework"

# Magic Variable Rules
magic_variables:
  enabled: true
  severity: "error"
  enforcement_level: "strict"
  
  rules:
    - id: "MV001"
      name: "No hardcoded numbers"
      description: "Numbers should be defined as named constants"
      pattern: "\\b(?<!\\.)\\d{2,}(?!\\.)"
      exclude_patterns:
        - "test_"
        - "spec_"
        - "__version__"
      
    - id: "MV002"
      name: "No magic strings"
      description: "String literals should be constants"
      min_length: 10
      exclude_patterns:
        - "logging"
        - "print"
        - "error message"

# Boilerplate Detection Rules
boilerplate:
  enabled: true
  severity: "warning"
  
  rules:
    - id: "BP001"
      name: "Duplicate code blocks"
      min_lines: 5
      similarity_threshold: 0.85
      action: "suggest_refactor"
      
    - id: "BP002"
      name: "Copy-paste patterns"
      min_lines: 10
      similarity_threshold: 0.90
      action: "require_abstraction"

# Test Coverage Rules
test_coverage:
  enabled: true
  enforcement_level: "strict"
  
  rules:
    - id: "TC001"
      name: "Test file required"
      description: "Every implementation file needs a test file"
      implementation_patterns:
        - "*.py"
        - "*.ts"
        - "*.js"
      test_patterns:
        - "*_test.py"
        - "test_*.py"
        - "*.spec.ts"
        - "*.test.js"
      
    - id: "TC002"
      name: "Test staleness check"
      description: "Tests must be run after code changes"
      max_staleness_hours: 24
      requires_rerun_on:
        - "implementation_change"
        - "dependency_update"
        - "configuration_change"

# Domain-Specific Rules
domains:
  database:
    - id: "DB001"
      name: "Use parameterized queries"
      severity: "error"
      pattern: "execute.*\\+|f-string in SQL"
      message: "SQL injection risk - use parameterized queries"
      
    - id: "DB002"
      name: "Connection pooling required"
      severity: "warning"
      check: "create_engine without pool_size"
      message: "Configure connection pooling for production"
      
    - id: "DB003"
      name: "Transaction boundaries"
      severity: "warning"
      check: "commit without context manager"
      message: "Use context managers for transactions"
  
  caching:
    - id: "CA001"
      name: "Cache key format"
      severity: "warning"
      pattern: "^[a-z0-9:_-]+$"
      message: "Use standard cache key format"
      
    - id: "CA002"
      name: "TTL required"
      severity: "error"
      check: "cache.set without ttl"
      message: "Always specify cache TTL"
      
    - id: "CA003"
      name: "Cache stampede protection"
      severity: "warning"
      check: "cache.get without lock"
      message: "Implement cache stampede protection"
  
  frontend:
    - id: "FE001"
      name: "No console.log in production"
      severity: "error"
      pattern: "console\\.(log|debug)"
      exclude: ["*.dev.*", "*.test.*"]
      message: "Remove console statements"
      
    - id: "FE002"
      name: "No inline styles"
      severity: "warning"
      pattern: "style=[\"']"
      message: "Use CSS classes instead"
      
    - id: "FE003"
      name: "Event listener cleanup"
      severity: "error"
      check: "addEventListener without removeEventListener"
      message: "Clean up event listeners"
  
  api:
    - id: "API001"
      name: "API versioning required"
      severity: "error"
      pattern: "/api/(?!v\\d)"
      message: "Use versioned API endpoints"
      
    - id: "API002"
      name: "Status codes required"
      severity: "warning"
      check: "return without status code"
      message: "Specify HTTP status codes"
      
    - id: "API003"
      name: "Input validation required"
      severity: "error"
      check: "request data without validation"
      message: "Validate all input data"
  
  security:
    - id: "SEC001"
      name: "No hardcoded secrets"
      severity: "critical"
      pattern: "(password|secret|key|token)\\s*=\\s*[\"'][^\"']+"
      message: "Use environment variables for secrets"
      
    - id: "SEC002"
      name: "No unsafe functions"
      severity: "critical"
      patterns:
        - "eval\\("
        - "exec\\("
        - "__import__\\("
      message: "Unsafe function usage detected"
      
    - id: "SEC003"
      name: "HTTPS required"
      severity: "error"
      pattern: "http://(?!localhost|127\\.0\\.0\\.1)"
      message: "Use HTTPS for external connections"

# Documentation Rules
documentation:
  enabled: true
  enforcement_level: "strict"
  
  rules:
    - id: "DOC001"
      name: "File header required"
      severity: "error"
      required_fields:
        - "@fileoverview"
        - "@author"
        - "@architecture"
        - "@responsibility"
      
    - id: "DOC002"
      name: "Business logic documentation"
      severity: "warning"
      check: "complex function without business logic comment"
      complexity_threshold: 10
      
    - id: "DOC003"
      name: "Architecture integration"
      severity: "warning"
      check: "integration point without documentation"

# Performance Rules
performance:
  enabled: true
  
  rules:
    - id: "PERF001"
      name: "No N+1 queries"
      severity: "error"
      pattern: "for.*\\.all\\(\\).*\\.filter"
      message: "Use eager loading to prevent N+1 queries"
      
    - id: "PERF002"
      name: "Batch operations"
      severity: "warning"
      pattern: "for.*session\\.add\\("
      message: "Use bulk operations for better performance"
      
    - id: "PERF003"
      name: "Async where appropriate"
      severity: "warning"
      check: "synchronous I/O in async context"
      message: "Use async I/O operations"

# Git Commit Rules
git_commits:
  enabled: true
  
  rules:
    - id: "GIT001"
      name: "Conventional commits"
      pattern: "^(feat|fix|docs|style|refactor|test|chore):"
      message: "Use conventional commit format"
      
    - id: "GIT002"
      name: "Commit size limit"
      max_files: 20
      max_lines: 500
      message: "Break large commits into smaller ones"
      
    - id: "GIT003"
      name: "No WIP commits"
      pattern: "^(WIP|wip|TODO)"
      severity: "error"
      message: "Complete work before committing"

# Risk Scoring
risk_scoring:
  thresholds:
    low: 3.0
    medium: 5.0
    high: 7.0
    critical: 9.0
  
  multipliers:
    security_issue: 2.0
    performance_issue: 1.5
    untested_code: 1.8
    missing_documentation: 1.2
  
  actions:
    low: "allow_with_warning"
    medium: "require_review"
    high: "require_approval"
    critical: "block_commit"

# Enforcement Settings
enforcement:
  mode: "strict"  # strict, moderate, lenient
  
  bypass_conditions:
    emergency:
      env_var: "GOVERNANCE_BYPASS"
      requires_reason: true
      log_bypass: true
      notify: ["team-lead", "security-team"]
    
    ci_environment:
      env_var: "CI"
      mode: "moderate"
    
    development:
      env_var: "DEV_MODE"
      warnings_only: true
      still_block: ["security", "critical"]
  
  escalation:
    repeated_violations: 3
    escalate_to: "team-lead"
    block_after: 5

# Reporting
reporting:
  enabled: true
  
  outputs:
    console:
      enabled: true
      format: "detailed"
      colors: true
    
    file:
      enabled: true
      path: ".governance/reports/"
      format: "json"
      retention_days: 30
    
    metrics:
      enabled: true
      collect:
        - "violations_by_type"
        - "risk_scores"
        - "exemptions_used"
        - "bypass_events"
      export_to: "governance_metrics.json"

# Integration Points
integrations:
  git_hooks:
    pre_commit:
      enabled: true
      script: "governance/scripts/integrated_pre_commit_hook.py"
      timeout_seconds: 30
    
    pre_push:
      enabled: false
      script: "governance/scripts/pre_push_hook.py"
      timeout_seconds: 60
  
  ci_pipeline:
    enabled: true
    fail_on_high_risk: true
    generate_report: true
  
  ide_plugins:
    vscode:
      enabled: true
      real_time: true
      show_hints: true
    
    intellij:
      enabled: false
      real_time: false

# Notification Settings
notifications:
  channels:
    email:
      enabled: false
      recipients: ["team-lead@example.com"]
      on_events: ["critical_violation", "bypass_used"]
    
    slack:
      enabled: false
      webhook: "${SLACK_WEBHOOK_URL}"
      channel: "#governance"
      on_events: ["high_risk_commit", "repeated_violations"]
    
    dashboard:
      enabled: true
      url: "http://localhost:3000/governance"
      real_time: true
{
  "$schema": "https://governance.ai/schemas/rules/test-exemptions/v1.0.0",
  "version": "1.0.0",
  "last_updated": "2025-01-28T20:00:00Z",
  "description": "Test exemption rules for governance validation",
  
  "test_file_patterns": {
    "description": "Patterns to identify test files",
    "patterns": [
      "test_*.py",
      "*_test.py",
      "*.test.[jt]s",
      "*.spec.[jt]s",
      "tests/**/*",
      "test/**/*",
      "__tests__/**/*",
      "spec/**/*"
    ]
  },
  
  "test_metadata_markers": {
    "description": "Metadata markers that indicate test code",
    "required_markers": [
      "@testing_strategy",
      "@test"
    ],
    "optional_markers": [
      "@unittest",
      "@pytest",
      "@jest",
      "@mocha",
      "@jasmine"
    ],
    "code_patterns": [
      "class Test*",
      "def test_*",
      "describe(*",
      "it(*",
      "test(*",
      "expect(*",
      "assert*"
    ]
  },
  
  "allowed_in_tests": {
    "description": "Patterns allowed in test files that would normally be dangerous",
    "dangerous_patterns": [
      "eval",
      "exec",
      "__import__",
      "compile",
      "globals",
      "locals",
      "setattr",
      "delattr",
      "DROP TABLE",
      "DELETE FROM"
    ],
    "justification": "Test files need to test dangerous patterns to ensure they're properly detected",
    "requirements": [
      "File must be in test directory or match test pattern",
      "File must have proper test metadata",
      "Patterns must be in string literals only",
      "No actual execution of dangerous code"
    ]
  },
  
  "context_exemptions": {
    "description": "Context-specific exemptions",
    "migration_files": {
      "patterns": ["**/migrations/*.py", "**/migrate/*.sql"],
      "allowed": ["DROP TABLE", "ALTER TABLE", "CREATE INDEX"],
      "justification": "Database migrations require DDL statements"
    },
    "schema_files": {
      "patterns": ["**/schema.sql", "**/schema/*.sql"],
      "allowed": ["CREATE TABLE", "CREATE INDEX", "CREATE VIEW"],
      "justification": "Schema definitions require DDL statements"
    },
    "fixture_files": {
      "patterns": ["**/fixtures/*.py", "**/fixtures/*.json"],
      "allowed": ["INSERT INTO", "UPDATE", "DELETE FROM"],
      "justification": "Test fixtures need to manipulate test data"
    },
    "mock_files": {
      "patterns": ["**/mocks/*.py", "**/mock_*.py"],
      "allowed": ["eval", "exec"],
      "justification": "Mock implementations may simulate dangerous operations"
    }
  },
  
  "explicit_exemption_syntax": {
    "description": "How to mark explicit exemptions in code",
    "inline_comment": "# governance-exempt: {pattern}",
    "block_comment": "# governance-exempt-start\n{code}\n# governance-exempt-end",
    "decorator": "@governance_exempt('{pattern}')",
    "metadata": "@governance_exemption reason='testing dangerous patterns'"
  },
  
  "test_file_requirements": {
    "description": "Requirements for test files with dangerous patterns",
    "mandatory_headers": [
      "@fileoverview",
      "@author",
      "@testing_strategy"
    ],
    "must_contain": [
      "Test class or function",
      "Assertion statements",
      "Test metadata"
    ],
    "must_not_contain": [
      "Production credentials",
      "Real API keys",
      "Actual database connections to production",
      "Real user data"
    ]
  },
  
  "validation_rules": {
    "strict_mode": {
      "enabled": false,
      "description": "When enabled, no exemptions are allowed"
    },
    "require_justification": {
      "enabled": true,
      "description": "Exemptions must include justification comment"
    },
    "log_exemptions": {
      "enabled": true,
      "description": "Log all exemptions for audit trail"
    },
    "max_exemptions_per_file": {
      "enabled": true,
      "limit": 10,
      "description": "Maximum number of exemptions allowed per file"
    }
  },
  
  "enforcement": {
    "test_files": {
      "level": "warning",
      "message": "Test file contains dangerous patterns - ensure proper test metadata"
    },
    "non_test_files": {
      "level": "error",
      "message": "Non-test file contains dangerous patterns - not allowed"
    },
    "missing_metadata": {
      "level": "warning",
      "message": "Test file with dangerous patterns should have complete metadata"
    },
    "production_secrets": {
      "level": "error",
      "message": "No exemptions for production secrets - use environment variables"
    }
  }
}
[pytest]
# Pytest configuration for AI Orchestration project
# Created: 2025-08-29
# Purpose: Standardize test execution and coverage reporting

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = 
    ai-assistant/backend/tests
    governance/tests
    tests

# Coverage settings
addopts = 
    # Verbose output
    -v
    # Show local variables in tracebacks
    -l
    # Short traceback format
    --tb=short
    # Coverage for all packages
    --cov=.
    # Show missing lines in coverage
    --cov-report=term-missing
    # Generate HTML coverage report
    --cov-report=html
    # Fail if coverage is below threshold
    --cov-fail-under=40
    # Strict markers
    --strict-markers
    # Show warnings
    -W default
    # Show summary of all test outcomes
    -ra

# Coverage omit patterns
[coverage:run]
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */node_modules/*
    */archive/*
    */.git/*
    */migrations/*
    */setup.py
    */conf.py

# Coverage report settings
[coverage:report]
exclude_lines =
    # Standard pragma
    pragma: no cover
    # Don't complain about debug code
    def __repr__
    def __str__
    # Don't complain if tests don't hit defensive assertion code
    raise AssertionError
    raise NotImplementedError
    # Don't complain if non-runnable code isn't run
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod
    # Don't complain about deprecations
    warnings.warn
    
precision = 2
show_missing = True

# Test markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    smoke: marks tests as smoke tests
    regression: marks tests as regression tests
    security: marks tests as security tests
    performance: marks tests as performance tests
    governance: marks tests as governance tests
    ai: marks tests as AI-related tests
    frontend: marks tests as frontend tests
    backend: marks tests as backend tests
    e2e: marks tests as end-to-end tests
    skip_on_ci: marks tests to skip on CI
    requires_db: marks tests that require database
    requires_redis: marks tests that require Redis
    requires_claude: marks tests that require Claude API

# Pytest plugins
plugins = 
    # Async support
    asyncio
    # Benchmark support
    benchmark
    # Coverage support
    cov

# Asyncio settings
asyncio_mode = auto

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings
filterwarnings =
    # Ignore deprecation warnings from third-party libraries
    ignore::DeprecationWarning:django.*
    ignore::DeprecationWarning:rest_framework.*
    # Treat our own deprecation warnings as errors
    error::DeprecationWarning:ai_assistant.*
    error::DeprecationWarning:governance.*
    # Ignore specific warnings
    ignore::PytestUnhandledCoroutineWarning
    ignore::PytestCollectionWarning

# Minimum Python version
minversion = 3.8

# Timeout for tests (seconds)
timeout = 300
timeout_method = thread

# Parallel execution (requires pytest-xdist)
# Uncomment to enable parallel testing
# addopts = -n auto

# Environment variables for testing
[pytest:env]
TESTING = true
GOVERNANCE_BYPASS = true
DATABASE_URL = sqlite:///:memory:
REDIS_URL = redis://localhost:6379/15
LOG_LEVEL = DEBUG